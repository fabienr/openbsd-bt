.\"	$OpenBSD$
.\"
.\" Copyright (c) 2020 Fabien Romano <fabien@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate$
.Dt BTHCI 9
.Os
.Sh NAME
.Nm bthci_init ,
.Nm bthci_destroy ,
.Nm bthci_pool_get ,
.Nm bthci_pool_put ,
.Nm bthci_read_evt ,
.Nm bthci_lm_* ,
.Nm bthci_cb_* ,
.Nm bthci_info_*
.Nd Bluetooth Host Controller Interface
.Sh SYNOPSIS
.In dev/bluetooth/bluetooth.h
.In bluetooth/bthci.h
.Ft void
.Fn bthci_init "struct bthci *hci" \
 "struct device *sc" \
 "struct btbus *bus" \
 "int ipl"
.Ft void
.Fn bthci_destroy "struct bthci *hci"
.Ft struct bt_evt *
.Fn bthci_pool_get "struct bthci *hci"
.Ft void
.Fn bthci_pool_put "struct bthci *hci" \
 "struct bt_evt *evt"
.Ft void
.Fn bthci_write_evt "struct bthci *hci" \
 "struct bt_evt *evt"
.Ft struct bt_evt *
.Fn bthci_read_evt "struct bthci *hci"
.Ft struct bt_evt *
.Fn bthci_lc_* "struct bthci *hci" "..."
.Ft struct bt_evt *
.Fn bthci_lp_* "struct bthci *hci" "..."
.Ft struct bt_evt *
.Fn bthci_cb_* "struct bthci *hci" "..."
.Ft struct bt_evt *
.Fn bthci_info_* "struct bthci *hci"
.Ft struct bt_evt *
.Fn bthci_state_* "struct bthci *hci" "..."
.Bd -literal
XXX see sys/bluetooth/bthci.h
.Ed
.Sh DESCRIPTION
The
.Nm bthci
functions provide a way to manage the bluetooth's controler subsystem and
implement asynchronous interrupt abstraction queue throught
.Xr mutex 9 ,
.Xr pool 9 ,
.Xr queue 3 and
.Xr tsleep 9 .
Note that some commands return a work in progress state while performing the
required task on the controller, thus they are asynchronous and will generate
further events to notify the host of the task state.
.Pp
The
.Nm bthci_init()
function is used to initiate the bthci pointed by hci with the provided
.Xr config_attach 9
context as sc, the btbus transport backend as bus and spl level as ipl.
.Pp
The
.Nm bthci_destroy()
function detroys hci's ressources. The caller is responsible for cleaning all
pending transactions before detroy.
.Pp
The
.Nm bthci_pool_get()
and
.Nm bthci_pool_put()
functions provide access to the corresponding
.Xr pool 9
functions in order to queue interupt event bt_evt from transport to higher
layer which will return theim later to the pool.
.Pp
The
.Nm bthci_write_evt()
function catch hci command event or queue it for higher layer and it wakeup the
appropriate sleep identifier.
.Pp
The
.Nm bthci_read_evt()
function return one bt_evt from the queue and NULL if there is no event. The
function is designed for a poll like patern in a recursive task.
.Pp
The
.Nm bthci_lc_*() ,
.Nm bthci_lp_*() ,
.Nm bthci_cb_*() ,
.Nm bthci_info_*()
and
.Nm bthci_state_*()
functions provide a synchronous abstraction of the bluetooth host controler
interface internals. These functions are designed to run in sequencial order
with an exclusive access to the transport and return the matching command
event. Those functions sleep and must be called only from process context.
.Sh SEE ALSO
.Xr bluetooth 4
.Xr mutex 9
.Xr pool 9
.Xr queue 3
.Xr tsleep 9
.Sh HISTORY
The bthci manager appeared in
.Ox 6.8 .
.Sh AUTHORS
.An -nosplit
The bthci manager was written by
.An Fabien Romano Aq Mt fabien@openbsd.org .
